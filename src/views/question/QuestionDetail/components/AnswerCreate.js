import React, { useState } from "react";
import { Notification, toast } from "components/ui";
import { useNavigate } from "react-router-dom";
import { apiCreateAnswer } from "services/QuestionService";
import RichTextEditor from "views/question/RTE";
import { Formik, Field, Form } from "formik";
import * as Yup from "yup";
import { Button, FormContainer, FormItem, Card } from "components/ui";
import { IconText, SvgIcon } from "components/shared";

const AnswerCreateSchema = Yup.object().shape({
  body: Yup.string().required("Body is required")
});

const PencilIcon = () => {
  return (
    <svg
      aria-hidden="true"
      class="svg-spot spotPencil"
      width="48"
      height="48"
      viewBox="0 0 48 48"
    >
      <path
        d="M31.52 5.2a.34.34 0 0 0-.46.08L7 39.94a.34.34 0 0 0-.06.16l-.54 5.21c-.03.26.24.45.48.34l4.77-2.29c.05-.02.1-.06.13-.1L35.83 8.58a.34.34 0 0 0-.09-.47l-4.22-2.93Z"
        opacity=".2"
      ></path>
      <path d="M28.53 2.82c.4-.58 1.2-.73 1.79-.32l4.22 2.92c.58.4.72 1.2.32 1.79L10.82 41.87c-.13.18-.3.33-.5.43l-4.77 2.28c-.9.44-1.93-.29-1.83-1.29l.55-5.2c.02-.22.1-.43.22-.6L28.53 2.81Zm4.43 3.81L29.74 4.4 28.2 6.6l3.22 2.24 1.53-2.21Zm-2.6 3.76-3.23-2.24-20.32 29.3 3.22 2.24 20.32-29.3ZM5.7 42.4 8.62 41l-2.57-1.78-.34 3.18Zm35.12.3a1 1 0 1 0-.9-1.78 35 35 0 0 1-7.94 3.06c-1.93.43-3.8.3-5.71-.04-.97-.17-1.93-.4-2.92-.64l-.3-.07c-.9-.21-1.81-.43-2.74-.62-2.9-.58-6.6-.49-9.43.65a1 1 0 0 0 .74 1.86c2.4-.96 5.68-1.07 8.3-.55.88.18 1.77.4 2.66.6l.3.08c1 .24 2 .48 3.03.66 2.07.37 4.22.53 6.5.02 3-.67 5.77-1.9 8.41-3.22Z"></path>
    </svg>
  );
};

const AnswerCreate = ({ questionId }) => {
  const [answerFieldActive, setAnswerFieldActive] = useState(false);

  const navigate = useNavigate();

  const handleSubmit = async (values, { setSubmitting }) => {
    const { body } = values;

    values = {
      post: {
        body
      }
    };

    console.log(values);
    setSubmitting(true);
    const response = await apiCreateAnswer(questionId, values);
    setSubmitting(false);

    if (response.data) {
      toast.push(
        <Notification title="Answer posted successfully" type="success" />,
        { placement: "top-center" }
      );

      navigate(`/questions/question-details?id=${questionId}`);
    }
  };

  return (
    <div className="flex flex-col gap-6 mt-20">
      <Formik
        initialValues={{
          body: ""
        }}
        validationSchema={AnswerCreateSchema}
        onSubmit={handleSubmit}
      >
        {({ errors, touched, isSubmitting }) => (
          <Form>
            <FormContainer>
              {answerFieldActive && (
                <FormItem>
                  <Card
                    header={
                      <span>
                        Reminder: Answers generated by AI tools are not allowed.
                      </span>
                    }
                    headerClass="text-gray-800 bg-slate-50"
                  >
                    <IconText
                      className="text-xs text-gray-800"
                      icon={
                        <SvgIcon className="text-4xl">{<PencilIcon />}</SvgIcon>
                      }
                    >
                      <ul className="pl-4 list-disc">
                        Thanks for contributing an answer to Stack Overflow!
                        <li>
                          Please be sure to answer the question. Provide details
                          and share your research!{" "}
                        </li>
                        <br />
                        But avoid â€¦
                        <li>
                          Asking for help, clarification, or responding to other
                          answers.
                        </li>
                        <li>
                          Making statements based on opinion; back them up with
                          references or personal experience.
                        </li>
                        <li>
                          To learn more, see our tips on writing great answers.
                        </li>
                      </ul>
                    </IconText>
                  </Card>
                </FormItem>
              )}
              <FormItem
                label="Your Answer"
                invalid={errors.body && touched.body}
                errorMessage={errors.body}
              >
                <div
                  tabIndex={0}
                  onFocus={() => setAnswerFieldActive(true)}
                  onBlur={() => setAnswerFieldActive(false)}
                  style={{ outline: "none" }}
                >
                  <Field name="body">
                    {({ field }) => (
                      <RichTextEditor
                        {...field}
                        modelValue={field.value}
                        placeholder="Enter your answer here..."
                        className="placeholder:text-xs"
                        onChange={val =>
                          field.onChange({
                            target: { name: "body", value: val }
                          })
                        }
                      />
                    )}
                  </Field>
                </div>
              </FormItem>

              <div className="mt-4 flex justify-end">
                <Button loading={isSubmitting} variant="solid">
                  Submit
                </Button>
              </div>
            </FormContainer>
          </Form>
        )}
      </Formik>
    </div>
  );
};

export default AnswerCreate;
